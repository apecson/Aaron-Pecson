<?php

/**
 * @file
 * Custom aaronpecson Code
 */

/**
 * Implements hook_views_default_views_alter()
 *
 * Removes Ajax from admin views
 */
function aaronpecson_custom_views_default_views_alter(&$views) {
  if (isset($views['admin_views_comment'])) {
    $views['admin_views_comment']->display['default']->display_options['use_ajax'] = FALSE;
  }
  if (isset($views['admin_views_node'])) {
    $views['admin_views_node']->display['default']->display_options['use_ajax'] = FALSE;
  }
  if (isset($views['admin_views_taxonomy_term'])) {
    $views['admin_views_taxonomy_term']->display['default']->display_options['use_ajax'] = FALSE;
  }
  if (isset($views['admin_views_user'])) {
    $views['admin_views_user']->display['default']->display_options['use_ajax'] = FALSE;
  }
}

/*
 * Implements hook_permission()
 */
function aaronpecson_custom_permission() {
  $permissions = array();
  
  // add permission for form submissions
  if (module_exists('entityform')) {
    $permissions['submit entityform types'] = array(
      'title' => t('Submit entityform types'),
      'description' => t('Submit entityforms types. Individual form access is still required.'),
    );
  }
  
  return $permissions;
}

/** 
 * Implements hook_menu_alter().
 */
function aaronpecson_custom_menu_alter(&$items) {
  // fix node clone
  if (!empty($items['node/%node/clone']['type'])) {
    $items['node/%node/clone']['type'] = MENU_LOCAL_TASK;
  }
  
  // clear unhelpful items
  unset($items['admin/content/files']);
  unset($items['admin/advanced_help']);
  unset($items['admin/help']);
  unset($items['node']);
}

/*
 * Implements hook_entity_info_alter()
 */
function aaronpecson_custom_entity_info_alter(&$info) {
  // custom access callback for entityforms
  if (!empty($info['entityform_type'])) {
    $info['entityform_type']['access callback'] = 'aaronpecson_custom_entityform_type_access';
  }
}

/**
 * Implements hook_form_alter()
 */
function aaronpecson_custom_form_alter(&$form, &$form_state, $form_id) {
  // hide meta tags on non node forms
  if (!empty($form['metatags']) && empty($form['#node_edit_form']) && $form_id != 'metatag_config_edit_form') {
    $form['metatags']['#access'] = FALSE;
  }
  
  // set default content type settings
  if ($form_id == 'node_type_form' && empty($form['#node_type']->type)) {
    $form['workflow']['node_options']['#default_value'] = array(
      0 => 'status',
      1 => 'revision',
    );
    $form['submission']['node_preview']['#default_value'] = 0;
    $form['comment']['comment']['#default_value'] = 0;
    $form['display']['node_submitted']['#default_value'] = FALSE;
  }

  if($form_id == 'webform_client_form_19') {
    $form['submitted']['full_name']['#attributes']['placeholder'] = t('Full Name');
    $form['submitted']['email']['#attributes']['placeholder'] = t('Email Address');
    $form['submitted']['message']['#attributes']['placeholder'] = t('What have you got to say?');
    $form['actions']['submit']['#value'] = t('Send It Off');
  }
}

/*
 * Altered access callback for entityform_type
 */
function aaronpecson_custom_entityform_type_access($op, $type = NULL, $account = NULL) {
  if ($op == 'view' && user_access('submit entityform types', $account)) {
    return TRUE;
  }
  return entityform_type_access($op, $type, $account);
}



/**
 * Implements hook_block_info()
 */
function aaronpecson_custom_block_info() {
  // This example comes from node.module.
  $blocks['work_detail'] = array(
    'info' => t('Details'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view()
 */
function aaronpecson_custom_block_view($delta = '') {
  // This example is adapted from node.module.
  $block = array();

  switch ($delta) {
    case 'work_detail':
      $block['subject'] = t('Details');
      $block['content'] = aaronpecson_custom_work_block();
      break;
      
  }
  return $block;
}


/*
 * Callback for custom work block
 */
function aaronpecson_custom_work_block() {
  $output = array(); //create empty array

  $node = menu_get_object(); //get object from menu
  if (!empty($node->type)) {
	 $output['work_detail'] = entity_view('node', array($node), 'work_detail'); //entity_view returns renderable array
	 $output['work_detail']['node'][$node->nid]['links']['#access'] = FALSE; //disable comments
 	} 
 
 	return $output;
}

